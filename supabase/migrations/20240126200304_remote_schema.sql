create table "public"."matches" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "team1" text not null default ''::text,
    "team2" text not null default ''::text,
    "winner" boolean not null,
    "round" bigint not null,
    "owner_user_id" uuid not null
);


alter table "public"."matches" enable row level security;

alter table "public"."rounds" add column "owner_user_id" uuid not null default auth.uid();

CREATE UNIQUE INDEX matches_pkey ON public.matches USING btree (id);

alter table "public"."matches" add constraint "matches_pkey" PRIMARY KEY using index "matches_pkey";

alter table "public"."matches" add constraint "matches_round_fkey" FOREIGN KEY (round) REFERENCES rounds(id) not valid;

alter table "public"."matches" validate constraint "matches_round_fkey";

grant delete on table "public"."matches" to "anon";

grant insert on table "public"."matches" to "anon";

grant references on table "public"."matches" to "anon";

grant select on table "public"."matches" to "anon";

grant trigger on table "public"."matches" to "anon";

grant truncate on table "public"."matches" to "anon";

grant update on table "public"."matches" to "anon";

grant delete on table "public"."matches" to "authenticated";

grant insert on table "public"."matches" to "authenticated";

grant references on table "public"."matches" to "authenticated";

grant select on table "public"."matches" to "authenticated";

grant trigger on table "public"."matches" to "authenticated";

grant truncate on table "public"."matches" to "authenticated";

grant update on table "public"."matches" to "authenticated";

grant delete on table "public"."matches" to "service_role";

grant insert on table "public"."matches" to "service_role";

grant references on table "public"."matches" to "service_role";

grant select on table "public"."matches" to "service_role";

grant trigger on table "public"."matches" to "service_role";

grant truncate on table "public"."matches" to "service_role";

grant update on table "public"."matches" to "service_role";

create policy "Allow individuals to create matches"
on "public"."matches"
as permissive
for insert
to authenticated
with check ((auth.uid() = owner_user_id));


create policy "Allow individuals to delete their own matches"
on "public"."matches"
as permissive
for delete
to authenticated
using ((auth.uid() = owner_user_id));


create policy "Allow individuals to update their own matches"
on "public"."matches"
as permissive
for update
to authenticated
using ((auth.uid() = owner_user_id))
with check ((auth.uid() = owner_user_id));


create policy "Allow individuals to view their own matches"
on "public"."matches"
as permissive
for select
to authenticated
using ((auth.uid() = owner_user_id));


create policy "Allow individuals to update their own rounds"
on "public"."rounds"
as permissive
for update
to authenticated
using ((auth.uid() = owner_user_id))
with check ((auth.uid() = owner_user_id));


create policy "allow individuals to create rounds"
on "public"."rounds"
as permissive
for insert
to authenticated
with check ((auth.uid() = owner_user_id));


create policy "allow individuals to delete their own rounds"
on "public"."rounds"
as permissive
for delete
to authenticated
using ((auth.uid() = owner_user_id));


create policy "allow individuals to view their own rounds"
on "public"."rounds"
as permissive
for select
to authenticated
using ((auth.uid() = owner_user_id));



